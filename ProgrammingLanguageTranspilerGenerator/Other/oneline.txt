#include <iostream>\n#include <fstream>\n#include <string>\n#include <vector>\n#include <map>\n#include <stdio.h>\n#include \"Transpiler.h\"\nusing namespace std;\n\nTranspiler::Transpiler(vector<string> toConvert, vector<string> converted, bool ignoreUnrecognizedStatements, string joinStatements, bool ignoreInDoubleQuotes, bool ignoreInSingleQuotes) {\n    if (toConvert.size() != converted.size()) {\n        cout << \"Error: vector<string> 'toConvert' and vector<string> 'converted' not the same length\" << endl;\n        throw exception();\n    }\n    ignoreUnrecognized = ignoreUnrecognizedStatements;\n    joinStatements = joinStatements;\n    ignoreDoubleQuotes = ignoreInDoubleQuotes;\n    ignoreSingleQuotes = ignoreInSingleQuotes;\n    setToConvert(toConvert);\n    setConverted(converted);\n};\n\nvoid Transpiler::setToConvert(vector<string> items) {\n    toConvert = items;\n};\n\nvoid Transpiler::setConverted(vector<string> items) {\n    converted = items;\n};\n\nstring Transpiler::join(vector<string> arr, string joiner) {\n    string fin = \"\";\n    for (int i = 0; i < arr.size(); ++i) {\n        fin += arr[i];\n        if (i != arr.size() - 1) {\n            fin += joiner;\n        }\n    }\n    return fin;\n}\n\nstring Transpiler::transpileTo(string input) {\n    vector<string> output;\n    bool inDoubleQuotes = false;\n    bool inSingleQuotes = false;\n    for (int i = 0; i < input.length(); ++i) {\n        bool found = false;\n        bool prevIsSlash = false;\n        if (i != 0) {\n            prevIsSlash = input[i-1] == '\\\\';\n        }\n        if (!prevIsSlash) {\n            if (input[i] == '\"' && ignoreDoubleQuotes && !inSingleQuotes) {\n                inDoubleQuotes = !inDoubleQuotes;\n                for (int j = 0; j < toConvert.size(); ++j) {\n                    if (toConvert[j] == \"\\\"\") {\n                        output.push_back(converted[j]);\n                    }\n                }\n            }\n            if (input[i] == '\\'' && ignoreSingleQuotes && !inDoubleQuotes) {\n                inSingleQuotes = !inSingleQuotes;\n                for (int j = 0; j < toConvert.size(); ++j) {\n                    if (toConvert[j] == \"'\") {\n                        output.push_back(converted[j]);\n                    }\n                }\n            }\n        }\n        if (!inDoubleQuotes && !inSingleQuotes) {\n            int longestIndex = -1;\n            int longestLength = 0;\n            for (int j = 0; j < toConvert.size(); ++j) {\n                if (toConvert[j] == input.substr(i, toConvert[j].length())) {\n                    if (toConvert[j].length() > longestLength) {\n                        longestLength = toConvert[j].length();\n                        longestIndex = j;\n                    }\n                }\n            }\n            if (longestIndex != -1) {\n                output.push_back(converted[longestIndex]);\n                found = true;\n                i += toConvert[longestIndex].length()-1;\n            }\n        }\n        else {\n            output.push_back(string(1, input[i]));\n        }\n        if (!inDoubleQuotes && !inSingleQuotes) {\n            if (!found && !ignoreUnrecognized) {\n                cout << ignoreUnrecognized << endl;\n                string error = \"Error: Statement Not Found at Index \";\n                error += to_string(i);\n                throw exception();\n            }\n            else if (!found) {\n                output.push_back(string(1, input[i]));\n            }\n        }\n    }\n    return join(output, joinStatements);\n}\n\nstring Transpiler::transpileFrom(string input) {\n    vector<string> output;\n    bool inDoubleQuotes = false;\n    bool inSingleQuotes = false;\n    for (int i = 0; i < input.length(); ++i) {\n        bool found = false;\n        bool prevIsSlash = false;\n        if (i != 0) {\n            prevIsSlash = input[i-1] == '\\\\';\n        }\n        if (!prevIsSlash) {\n            if (input[i] == '\"' && ignoreDoubleQuotes && !inSingleQuotes) {\n                inDoubleQuotes = !inDoubleQuotes;\n                for (int j = 0; j < converted.size(); ++j) {\n                    if (converted[j] == \"\\\"\") {\n                        output.push_back(toConvert[j]);\n                    }\n                }\n            }\n            if (input[i] == '\\'' && ignoreSingleQuotes && !inDoubleQuotes) {\n                inSingleQuotes = !inSingleQuotes;\n                for (int j = 0; j < converted.size(); ++j) {\n                    if (converted[j] == \"'\") {\n                        output.push_back(toConvert[j]);\n                    }\n                }\n            }\n        }\n        if (!inDoubleQuotes && !inSingleQuotes) {\n            int longestIndex = -1;\n            int longestLength = 0;\n            for (int j = 0; j < converted.size(); ++j) {\n                if (converted[j] == input.substr(i, converted[j].length())) {\n                    if (converted[j].length() > longestLength) {\n                        longestLength = converted[j].length();\n                        longestIndex = j;\n                    }\n                }\n            }\n            if (longestIndex != -1) {\n                output.push_back(toConvert[longestIndex]);\n                found = true;\n                i += converted[longestIndex].length()-1;\n            }\n        }\n        else {\n            output.push_back(string(1, input[i]));\n        }\n        if (!inDoubleQuotes && !inSingleQuotes) {\n            if (!found && !ignoreUnrecognized) {\n                cout << ignoreUnrecognized << endl;\n                string error = \"Error: Statement Not Found at Index \";\n                error += to_string(i);\n                throw exception();\n            }\n            else if (!found) {\n                output.push_back(string(1, input[i]));\n            }\n        }\n    }\n    return join(output, joinStatements);\n}\n\nstring Transpiler::transpileToFromFile(string inputFile) {\n    string line;\n    string allContent = \"\";\n    ifstream file (inputFile);\n    if (!file.is_open()) {\n        cout << \"Unable to open file\" << endl;\n        throw exception();\n    }\n    while (getline(file, line)) {\n        allContent += line + '\\n';\n    }\n    file.close();\n    allContent.erase(prev(allContent.end()));\n\n    return transpileTo(allContent);\n};\n\nstring Transpiler::transpileFromFromFile(string inputFile) {\n    string line;\n    string allContent = \"\";\n    ifstream file (inputFile);\n    if (!file.is_open()) {\n        cout << \"Unable to open file\" << endl;\n        throw exception();\n    }\n    while (getline(file, line)) {\n        allContent += line + '\\n';\n    }\n    file.close();\n    allContent.erase(prev(allContent.end()));\n\n    return transpileFrom(allContent);\n};